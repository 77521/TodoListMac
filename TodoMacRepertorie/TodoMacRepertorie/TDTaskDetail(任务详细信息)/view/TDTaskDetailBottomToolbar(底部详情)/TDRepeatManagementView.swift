//
//  TDRepeatManagementView.swift
//  TodoMacRepertorie
//
//  Created by Â≠¨Â≠¨ on 2025/1/21.
//

import SwiftUI

/// ÈáçÂ§ç‰∫ã‰ª∂ÁÆ°ÁêÜÂºπÁ™óËßÜÂõæ
/// Áî®‰∫éÊòæÁ§∫ÂíåÁÆ°ÁêÜÈáçÂ§ç‰ªªÂä°ÁöÑÂàóË°®
struct TDRepeatManagementView: View {
    
    // MARK: - Êï∞ÊçÆÁªëÂÆö
    @EnvironmentObject private var themeManager: TDThemeManager  // ‰∏ªÈ¢òÁÆ°ÁêÜÂô®
    @Environment(\.modelContext) private var modelContext  // SwiftData Êï∞ÊçÆ‰∏ä‰∏ãÊñá
    @Binding var isPresented: Bool  // ÊéßÂà∂ÂºπÁ™óÊòæÁ§∫Áä∂ÊÄÅ
    let task: TDMacSwiftDataListModel  // ÂΩìÂâç‰ªªÂä°Êï∞ÊçÆ
    
    // MARK: - Áä∂ÊÄÅÂèòÈáè
    @State private var repeatTasks: [TDMacSwiftDataListModel] = []  // ÈáçÂ§ç‰ªªÂä°ÂàóË°®
    @State private var showHelpModal = false  // ÊéßÂà∂Â∏ÆÂä©ËØ¥ÊòéÂºπÁ™óÊòæÁ§∫
    @State private var showDeleteAlert = false  // ÊéßÂà∂Âà†Èô§Á°ÆËÆ§ÂºπÁ™ó
    
    // MARK: - ‰∏ªËßÜÂõæ
    var body: some View {
        VStack(spacing: 0) {
            // Ê†áÈ¢òÊ†è
            titleBar
            
            // ÂàÜÂâ≤Á∫ø
            Divider()
                .background(themeManager.separatorColor)
            
            // ‰ªªÂä°ÂàóË°®
            taskList
//                .frame(maxWidth: .infinity, maxHeight: .infinity)
            
            // Â∫ïÈÉ®Êìç‰ΩúÊ†è
            bottomActionBar
        }
        .frame(width: 450, height: 500)
        .background(themeManager.backgroundColor)
        .cornerRadius(16)
        .shadow(color: .black.opacity(0.15), radius: 20, x: 0, y: 10)
        .overlay(
            // Â∏ÆÂä©ËØ¥ÊòéÂºπÁ™ó
            Group {
                if showHelpModal {
                    helpModalOverlay
                }
            }
        )
        .alert("Á°ÆËÆ§Âà†Èô§", isPresented: $showDeleteAlert) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("Âà†Èô§", role: .destructive) {
                deleteAllRepeatTasks()
            }
        } message: {
            Text("Á°ÆÂÆöË¶ÅÂà†Èô§ÊâÄÊúâÈáçÂ§ç‰∫ã‰ª∂ÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ")
        }
    }
    
    // MARK: - Â≠êËßÜÂõæ
    
    /// Ê†áÈ¢òÊ†è
    private var titleBar: some View {
        HStack {
            // Ê†áÈ¢òÂíåÈóÆÂè∑ÂõæÊ†áÊåâÈíÆ
            Button(action: {
                showHelpModal = true
            }) {
                HStack(spacing: 6) {
                    Image(systemName: "repeat.circle.fill")
                        .font(.system(size: 16))
                        .foregroundColor(themeManager.color(level: 5))
                    
                    Text("ÈáçÂ§ç‰∫ã‰ª∂ÁÆ°ÁêÜ")
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(themeManager.titleTextColor)
                    
                    Image(systemName: "questionmark.circle")
                        .font(.system(size: 14))
                        .foregroundColor(themeManager.descriptionTextColor)
                }
            }
            .buttonStyle(PlainButtonStyle())
            .help("Êü•ÁúãÈáçÂ§ç‰∫ã‰ª∂ËØ¥Êòé")
            
            Spacer()
            
            // ÂÖ≥Èó≠ÊåâÈíÆ
            Button(action: {
                isPresented = false
            }) {
                Image(systemName: "xmark.circle.fill")
                    .font(.system(size: 16))
                    .foregroundColor(themeManager.descriptionTextColor)
            }
            .buttonStyle(PlainButtonStyle())
            .help("ÂÖ≥Èó≠")
        }
        .padding(.horizontal, 20)
        .padding(.vertical, 16)
        .background(themeManager.backgroundColor)
    }
    
    /// ‰ªªÂä°ÂàóË°®
    private var taskList: some View {
        ScrollView {
            LazyVStack(spacing: 0) {
                ForEach(Array(repeatTasks.enumerated()), id: \.offset) { index, task in
                    TaskRowView(task: task)
                        .environmentObject(themeManager)
                        .onAppear {
                            print("üì± ÊòæÁ§∫‰ªªÂä° \(index + 1): \(task.taskContent)")
                        }
                }
            }
            .padding(.vertical, 8)
        }
        .background(themeManager.backgroundColor)
        .onAppear {
            loadRepeatTasks()
        }
        .onChange(of: repeatTasks.count) { oldValue, newValue in
            print("üîÑ ‰ªªÂä°Êï∞ÈáèÂèòÂåñ: \(oldValue) -> \(newValue)")
        }

    }
    
    /// Â∫ïÈÉ®Êìç‰ΩúÊ†è
    private var bottomActionBar: some View {
        HStack {
            // ÁªüËÆ°‰ø°ÊÅØ
            HStack(spacing: 4) {
                Image(systemName: "list.bullet")
                    .font(.system(size: 12))
                    .foregroundColor(themeManager.descriptionTextColor)
                
                Text("ÂÖ± \(repeatTasks.count) ‰∏™ÈáçÂ§ç‰∫ã‰ª∂")
                    .font(.system(size: 12))
                    .foregroundColor(themeManager.descriptionTextColor)
            }
            
            Spacer()
            
            // Âà†Èô§ÊåâÈíÆ
            Button(action: {
                showDeleteAlert = true
            }) {
                HStack(spacing: 6) {
                    Image(systemName: "trash.fill")
                        .font(.system(size: 12))
                    Text("Âà†Èô§ÂÖ®ÈÉ®")
                        .font(.system(size: 12, weight: .medium))
                }
                .foregroundColor(.white)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(.red)
                )
            }
            .buttonStyle(PlainButtonStyle())
            .help("Âà†Èô§ÊâÄÊúâÈáçÂ§ç‰∫ã‰ª∂")
        }
        .padding(.horizontal, 20)
        .padding(.vertical, 12)
        .background(themeManager.secondaryBackgroundColor)
    }
    
    
    /// Â∏ÆÂä©ËØ¥ÊòéÂºπÁ™óÈÅÆÁΩ©
    private var helpModalOverlay: some View {
        ZStack {
            // ÂçäÈÄèÊòéËÉåÊôØÈÅÆÁΩ©
            Color.black.opacity(0.4)
                .ignoresSafeArea(.all)
                .onTapGesture {
                    showHelpModal = false
                }
            
            // Â∏ÆÂä©ËØ¥ÊòéÂºπÁ™óÂÜÖÂÆπ
            helpModalContent
                .transition(.asymmetric(
                    insertion: .scale(scale: 0.8).combined(with: .opacity),
                    removal: .scale(scale: 0.8).combined(with: .opacity)
                ))
        }
        .zIndex(1000)
        .animation(.easeInOut(duration: 0.2), value: showHelpModal)
    }
    
    /// Â∏ÆÂä©ËØ¥ÊòéÂºπÁ™óÂÜÖÂÆπ
    private var helpModalContent: some View {
        VStack(spacing: 0) {
            // Ê†áÈ¢ò
            HStack {
                Image(systemName: "info.circle.fill")
                    .font(.system(size: 16))
                    .foregroundColor(themeManager.color(level: 5))
                
                Text("ÈáçÂ§ç‰∫ã‰ª∂ËØ¥Êòé")
                    .font(.system(size: 16, weight: .semibold))
                    .foregroundColor(themeManager.titleTextColor)
                
                Spacer()
                
                Button(action: {
                    showHelpModal = false
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.system(size: 16))
                        .foregroundColor(themeManager.descriptionTextColor)
                }
                .buttonStyle(PlainButtonStyle())
            }
            .padding(.horizontal, 20)
            .padding(.top, 20)
            .padding(.bottom, 16)
            
            // ÂàÜÂâ≤Á∫ø
            Divider()
                .background(themeManager.separatorColor)
            
            // ËØ¥ÊòéÂÜÖÂÆπ
            VStack(alignment: .leading, spacing: 20) {
                // Á¨¨1Êù°ËØ¥Êòé
                helpItem(
                    icon: "pencil.circle.fill",
                    title: "Â¶Ç‰Ωï‰øÆÊîπÈáçÂ§ç‰∫ã‰ª∂?",
                    description: "ÊÇ®ÂèØ‰ª•Âú®‰∫ã‰ª∂ÂºπÁ™ó‰∏≠ËøõË°å‰øÆÊîπÔºåÂπ∂ÁÇπÂáª‰øùÂ≠òÔºåÈÄâÊã©ÂÖ®ÈÉ®‰øÆÊîπ„ÄÇ"
                )
                
                // Á¨¨2Êù°ËØ¥Êòé
                helpItem(
                    icon: "trash.circle.fill",
                    title: "Â¶Ç‰ΩïÂà†Èô§ÈáçÂ§ç‰∫ã‰ª∂?",
                    description: "Âú®‰∫ã‰ª∂ÂºπÁ™óÊàñËÄÖÈáçÂ§ç‰∫ã‰ª∂ÁÆ°ÁêÜ‰∏≠ËøõË°åÂà†Èô§ÔºåÈÄâÊã©ÂÖ®ÈÉ®Âà†Èô§„ÄÇ"
                )
                
                // Á¨¨3Êù°ËØ¥Êòé
                helpItem(
                    icon: "gear.circle.fill",
                    title: "Â¶Ç‰Ωï‰øÆÊîπÈáçÂ§çËßÑÂàô?",
                    description: "ÊöÇÊó∂Êó†Ê≥ï‰øÆÊîπÔºåÊÇ®ÂèØ‰ª•Âà†Èô§ÂÖ®ÈÉ®ÂêéÈáçÊñ∞ÂàõÂª∫Êñ∞ÁöÑËßÑÂàô„ÄÇ"
                )
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
        }
        .frame(width: 320)
        .background(themeManager.backgroundColor)
        .cornerRadius(16)
        .shadow(color: .black.opacity(0.2), radius: 20, x: 0, y: 10)
    }
    
    /// Â∏ÆÂä©ËØ¥ÊòéÈ°π
    private func helpItem(icon: String, title: String, description: String) -> some View {
        HStack(alignment: .top, spacing: 12) {
            Image(systemName: icon)
                .font(.system(size: 16))
                .foregroundColor(themeManager.color(level: 5))
                .frame(width: 20)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(themeManager.titleTextColor)
                
                Text(description)
                    .font(.system(size: 12))
                    .foregroundColor(themeManager.descriptionTextColor)
                    .multilineTextAlignment(.leading)
                    .fixedSize(horizontal: false, vertical: true)
            }
        }
    }

    // MARK: - ÁßÅÊúâÊñπÊ≥ï
    
    /// Âä†ËΩΩÈáçÂ§ç‰ªªÂä°Êï∞ÊçÆ
    private func loadRepeatTasks() {
        guard let repeatId = task.standbyStr1, !repeatId.isEmpty else {
            return
        }
        
        Task {
            do {
                // Êü•ËØ¢ÊâÄÊúâÈáçÂ§ç‰ªªÂä°ÔºàÂåÖÊã¨Â∑≤ÂÆåÊàêÁöÑÔºâ
                let tasks = try await TDQueryConditionManager.shared.getDuplicateTasks(
                    standbyStr1: repeatId,
                    onlyUncompleted: false,
                    context: modelContext
                )
                
                await MainActor.run {
                    self.repeatTasks = tasks
                    print("‚úÖ Âä†ËΩΩÈáçÂ§ç‰ªªÂä°ÊàêÂäüÔºåÂÖ± \(tasks.count) ‰∏™‰ªªÂä°")
                }
                
            } catch {
                print("‚ùå Âä†ËΩΩÈáçÂ§ç‰ªªÂä°Â§±Ë¥•: \(error)")
            }
        }
    }
    
    /// Âà†Èô§ÊâÄÊúâÈáçÂ§ç‰ªªÂä°
    private func deleteAllRepeatTasks() {
        guard let repeatId = task.standbyStr1, !repeatId.isEmpty else {
            return
        }
        
        Task {
            do {
                // Êü•ËØ¢ÊâÄÊúâÈáçÂ§ç‰ªªÂä°ÔºàÂåÖÊã¨Â∑≤ÂÆåÊàêÁöÑÔºâ
                let tasksToDelete = try await TDQueryConditionManager.shared.getDuplicateTasks(
                    standbyStr1: repeatId,
                    onlyUncompleted: false,
                    context: modelContext
                )
                
                // Ê†áËÆ∞ÊâÄÊúâ‰ªªÂä°‰∏∫Âà†Èô§Áä∂ÊÄÅ
                for taskToDelete in tasksToDelete {
                    taskToDelete.delete = true
                    taskToDelete.status = "delete"
                    _ = try await TDQueryConditionManager.shared.updateLocalTaskWithModel(
                        updatedTask: taskToDelete,
                        context: modelContext
                    )
                }
                // Ê∏ÖÁ©∫Á¨¨‰∫åÂàóÈÄâ‰∏≠ÁöÑ‰ªªÂä°Êï∞ÊçÆÔºåÈÅøÂÖçÁ¨¨‰∏âÂàóÊòæÁ§∫Â∑≤Âà†Èô§‰ªªÂä°ÁöÑÊï∞ÊçÆ
                TDMainViewModel.shared.selectedTask = nil

                await MainActor.run {
                    // Âà†Èô§ÊàêÂäüÂêéÂÖ≥Èó≠ÂºπÁ™ó
                    isPresented = false
                }
                
                print("‚úÖ Âà†Èô§ÈáçÂ§ç‰∫ã‰ª∂ÁªÑÊàêÂäüÔºåÂÖ±Âà†Èô§ \(tasksToDelete.count) ‰∏™‰ªªÂä°")
                
            } catch {
                print("‚ùå Âà†Èô§ÈáçÂ§ç‰ªªÂä°Â§±Ë¥•: \(error)")
            }
        }
    }
}

// MARK: - ‰ªªÂä°Ë°åËßÜÂõæ
struct TaskRowView: View {
    let task: TDMacSwiftDataListModel
    @EnvironmentObject private var themeManager: TDThemeManager
    
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            // ‰ªªÂä°Ê†áÈ¢ò
            Text(task.taskContent)
                .font(.system(size: 14))
                .foregroundColor(themeManager.titleTextColor)
                .lineLimit(1)
            
            // Êó•Êúü
            Text(task.taskDate.dateAndWeekString)
                .font(.system(size: 12))
                .foregroundColor(themeManager.color(level: 5))
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding(.horizontal, 10)
        .padding(.vertical, 8)
        .background(themeManager.backgroundColor)
        .overlay(
            Rectangle()
                .fill(themeManager.separatorColor)
                .frame(height: 1),
            alignment: .bottom
        )
    }
}

//// MARK: - È¢ÑËßà
//#Preview {
//    let sampleTask = TDMacSwiftDataListModel(
//        taskContent: "Á§∫‰æã‰ªªÂä°",
//        todoTime: Date().fullTimestamp,
//        reminderTime: 0
//    )
//    
//    TDRepeatManagementView(isPresented: .constant(true), task: sampleTask)
//        .environmentObject(TDThemeManager.shared)
//}
